x = valence,
y = arousal,
shape = target_emotion,
color = target_emotion
)
)+
geom_point()
data %>%
group_by(
target_emotion,
stimulus_song
) %>%
summarise(
across(
valence:arousal,
mean
),
prop_correct = sum(correct)/n()
) %>%
ggplot2::ggplot(
aes(
x = valence,
y = arousal,
shape = target_emotion,
color = target_emotion
)
) +
geom_point() +
geom_point(
data = v_a_desc
)
library(ggpubr)
by_song <- data %>%
group_by(
target_emotion,
stimulus_song
) %>%
summarise(
across(
valence:arousal,
mean
),
prop_correct = sum(correct)/n()
)
names(by_song)
ggpubr::ggscatter(
data = by_song,
x = "valence",
y = "arousal",
color = "target_emotion",
ellipse = TRUE,
mean.point = TRUE
)
ggpubr::ggscatter(
data = by_song,
x = "valence",
y = "arousal",
color = "target_emotion",
ellipse = TRUE,
mean.point = TRUE,
star.plot = TRUE
)
ggpubr::ggscatter(
data = by_song,
x = "valence",
y = "arousal",
color = "target_emotion",
ellipse = TRUE,
mean.point = TRUE,
star.plot = TRUE
) +
scale_y_continuous(name = "Arousal Means", breaks = seq(1, 7, by = 1))
ggpubr::ggscatter(
data = by_song,
x = "valence",
y = "arousal",
color = "target_emotion",
ellipse = TRUE,
mean.point = TRUE,
star.plot = TRUE
) +
scale_y_continuous(name = "Arousal Means",limits = c(1, 7), breaks = seq(1, 7, by = 1))
ggpubr::ggscatter(
data = by_song,
x = "valence",
y = "arousal",
color = "target_emotion",
ellipse = TRUE,
mean.point = TRUE,
star.plot = TRUE
) +
scale_y_continuous(name = "Arousal Means",limits = c(1, 7), breaks = seq(1, 7, by = 1)) +
scale_x_continuous(name = "Valence Means",limits = c(1, 7), breaks = seq(1, 7, by = 1))
ggpubr::ggscatter(
data = by_song,
x = "valence",
y = "arousal",
color = "target_emotion",
ellipse = FALSE,
mean.point = TRUE,
star.plot = TRUE
) +
scale_y_continuous(name = "Arousal Means",limits = c(1, 7), breaks = seq(1, 7, by = 1)) +
scale_x_continuous(name = "Valence Means",limits = c(1, 7), breaks = seq(1, 7, by = 1))
ggpubr::ggscatter(
data = by_song,
x = "valence",
y = "arousal",
color = "target_emotion",
ellipse = FALSE,
mean.point = TRUE,
star.plot = TRUE
) +
scale_y_continuous(name = "Arousal Means",limits = c(1, 7), breaks = seq(1, 7, by = 1)) +
scale_x_continuous(name = "Valence Means",limits = c(1, 7), breaks = seq(1, 7, by = 1)) +
theme(legend.text = element_text("Target Emotion"))
ggpubr::ggscatter(
data = by_song,
x = "valence",
y = "arousal",
color = "target_emotion",
ellipse = FALSE,
mean.point = TRUE,
star.plot = TRUE
) +
scale_y_continuous(name = "Arousal Means",limits = c(1, 7), breaks = seq(1, 7, by = 1)) +
scale_x_continuous(name = "Valence Means",limits = c(1, 7), breaks = seq(1, 7, by = 1)) +
theme(legend.title = element_blank())
NbClust::NbClust(data = by_song)
NbClust::NbClust(data = by_song, method = "kmeans")
NbClust::NbClust(data = select(by_song, valence, arousal), method = "kmeans")
select(by_song, valence, arousal)
as.tibble(by_song)
data.frame(by_song)
for_k_means <- data.frame(by_songs) # so that the group by is ignored
for_k_means <- data.frame(by_song) # so that the group by is ignored
NbClust::NbClust(data = select(by_song, valence, arousal), method = "kmeans")
??group_split
cur_data(by_song)
str(by_song)
ungroup(by_song)
by_song <- data %>%
group_by(
target_emotion,
stimulus_song
) %>%
summarise(
across(
valence:arousal,
mean
),
prop_correct = sum(correct)/n()
) %>%
ungroup()
ggpubr::ggscatter(
data = by_song,
x = "valence",
y = "arousal",
color = "target_emotion",
ellipse = FALSE,
mean.point = TRUE,
star.plot = TRUE
) +
scale_y_continuous(name = "Arousal Means",limits = c(1, 7), breaks = seq(1, 7, by = 1)) +
scale_x_continuous(name = "Valence Means",limits = c(1, 7), breaks = seq(1, 7, by = 1)) +
theme(legend.title = element_blank())
for_k_means <- data.frame(by_song) # so that the group by is ignored
NbClust::NbClust(data = select(by_song, valence, arousal), method = "kmeans")
library(factoextra)
install.packages("cluster")
library(cluster)
for_clust <- by_song %>%
select(
valence, arousal, stimulus_song
)
for_clust <- by_song %>%
select(
valence, arousal, stimulus_song
) %>%
column_to_rownames(var = "stimulus_song")
for_clust
NbClust::NbClust(data = select(by_song, valence, arousal), method = "kmeans")
km <- kmeans(for_clust, 2)
factoextra::fviz(km)
factoextra::fviz_cluster(km)
km
factoextra::fviz_cluster(km, data = for_clust)
cluster::fanny(for_clust, 4)
cm <- cluster::fanny(for_clust, 4)
fviz_contrib(cm)
cm <- cluster::fanny(for_clust, 4)
cm
km <- kmeans(for_clust, 4)
factoextra::fviz_cluster(km, data = for_clust)
km <- kmeans(for_clust, 2)
factoextra::fviz_cluster(km, data = for_clust)
km
km$cluster
data.frame(km$cluster)
names(data)
glimpse(data)
clusters <- km$cluster %>%
data.frame() %>%
tibble::rowid_to_column(var = "stimulus_song")
clusters
clusters <- km$cluster %>%
data.frame() #%>%
clusters
tibble::rowname_to_column(var = "stimulus_song")
tibble::rownames_to_column("stimulus_song")
clusters <- km$cluster %>%
data.frame() %>%
tibble::rownames_to_column("stimulus_song")
clusters
data_clusters <- left_join(
data,
clusters
)
data_clusters
glimpse(data_clusters)
clusters <- km$cluster %>%
data.frame() %>%
tibble::rownames_to_column("stimulus_song") %>%
rename(
cluster = .
)
clusters <- km$cluster %>%
data.frame(row.names = "cluster") %>%
tibble::rownames_to_column("stimulus_song")
clusters <- km$cluster %>%
tibble() %>%
tibble::rownames_to_column("stimulus_song")
clusters
clusters <- km$cluster %>%
data.frame() %>%
tibble::rownames_to_column("stimulus_song")
clusters
clusters <- km$cluster %>%
data.frame(check.names = FALSE) %>%
tibble::rownames_to_column("stimulus_song")
clusters
clusters <- km$cluster %>%
data.frame() %>%
tibble::rownames_to_column("stimulus_song")
clusters <- km$cluster %>%
data.frame() %>%
tibble::rownames_to_column("stimulus_song") %>%
rename(
"cluster" = "."
)
clusters
data_clusters <- left_join(
data,
clusters
)
table(data_clusters$target_emotion, data_clusters$cluster)
factoextra::fviz_cluster(km, data = for_clust)
data_clusters <- left_join(
data,
clusters
) %>%
mutate(
cluster = as.factor(cluster)
)
table(data_clusters$target_emotion, data_clusters$cluster)
relax_model <- lme4::glmer(
correct ~ cluster + (1 | id),
family = "binomial",
data = select(data, target_emotion == "relaxed")
)
relax_model <- lme4::glmer(
correct ~ cluster + (1 | id),
family = "binomial",
data = select(data_clusters, target_emotion == "relaxed")
)
names(data_clusters)
relax_model <- lme4::glmer(
correct ~ cluster + (1 | id),
family = "binomial",
data = filter(data_clusters, target_emotion == "relaxed")
)
relax_model <- lme4::glmer(
correct ~ cluster + (1 | pid),
family = "binomial",
data = filter(data_clusters, target_emotion == "relaxed")
)
summary(relax_model)
sjPlot::plot_model(relax_model)
relax_model <- lme4::glmer(
cluster ~ correct + (1 | pid),
family = "binomial",
data = filter(data_clusters, target_emotion == "relaxed")
)
sjPlot::plot_model(relax_model)
levels(data$cluster)
levels(data_clusters$cluster)
?isSingular
table(data_clusters$target_emotion, data_clusters$cluster, data_clusters$correct)
confusion <- table(data$stimulus_song, data$target_emotion)
confusion
confusion <- table(data$stimulus_song, data$emotion)
confusion <- table(data$stimulus_song, data$selected_emotion)
confusion
confusion <- table(data$stimulus_song, data$selected_emotion, data$target_emotion)
confusion
confusion <- as.data.frame(table(data$stimulus_song, data$selected_emotion, data$target_emotion))
confusion
confusion_df <- confusion %>%
as.data.frame() %>%
rename(
song = Var1,
select_emotion = Var2,
target_emotion = Var3
)
filter(confusion_df, target_emotion == "relaxed")
filter(confusion_df, target_emotion == "relaxed" & freq > 0)
filter(confusion_df, target_emotion == "relaxed" & Freq > 0)
confusion
confusion <- table(data$stimulus_song, data$selected_emotion, data$target_emotion)
confusion
confusion <- table(data$selected_emotion, data$target_emotion)
confusion
confusion <- table(data$stimulus_song, data$correct, data$target_emotion)
confusion
confusion <- table(data$selected_emoton, data$target_emotion)
confusion <- table(data$selected_emotion, data$target_emotion)
confusion
confusion <- table(data$selected_emotion, data$stimulus_song)
confusion
confusion <- table(data$stimulus_song, data$selected_emotion)
confusion
confusion <- table(data$stimulus_song, data$correct)
confusion
relax_model <- lme4::glmer(correct~valence * arousal + (1 |pid) + stimulus_song,
data = filter(data, target_emotion == relaxed))
relax_model <- lme4::glmer(correct~valence * arousal + (1 |pid) + stimulus_song,
data = filter(data, target_emotion == "relaxed"))
relax_model <- lme4::glmer(correct~valence * arousal + (1 |pid) + stimulus_song,
data = filter(data, target_emotion == "relaxed"),
family = "binomial")
relax_model
summary(relax_model)
relax_model <- lme4::glmer(correct~valence * arousal + (1 |pid) + (1 |stimulus_song),
data = filter(data, target_emotion == "relaxed"),
family = "binomial")
summary(relax_model)
sjPlot::plot_model(relax_model)
sjPlot::plot_model(relax_model, "eff")
install.packages("ggeffects")
install.packages("ggeffects")
ggpredict(
relax_model,
c("valence", "arousal")
)
ggpredict::ggpredict(
relax_model,
c("valence", "arousal")
)
ggeffects:ggpredict(
relax_model,
c("valence", "arousal")
)
library(ggeffects)
ggeffects::ggpredict(
relax_model,
c("valence", "arousal")
)
relax_model <- lme4::glmer(as.factor(correct)~valence * arousal + (1 |pid) + (1 |stimulus_song),
data = filter(data, target_emotion == "relaxed"),
family = "binomial")
data <- here::here(
"data",
"1000ms_processed_data.csv"
) %>%
read_csv() %>%
rename(
target_emotion = target_song,
selected_emotion = emotion
) %>%
mutate(
stimulus_song = str_extract(string = stimulus_song, pattern = "[[:digit:]]_(.*)"),
correct = case_when(
correct == TRUE ~ "TRUE",
correct == FALSE ~ "FALSE"
)
)
library(tidyverse)
library(sjPlot)
library(ggeffects)
data <- here::here(
"data",
"1000ms_processed_data.csv"
) %>%
read_csv() %>%
rename(
target_emotion = target_song,
selected_emotion = emotion
) %>%
mutate(
stimulus_song = str_extract(string = stimulus_song, pattern = "[[:digit:]]_(.*)"),
correct = case_when(
correct == TRUE ~ "TRUE",
correct == FALSE ~ "FALSE"
)
)
glimpse(data)
data <- here::here(
"data",
"1000ms_processed_data.csv"
) %>%
read_csv() %>%
rename(
target_emotion = target_song,
selected_emotion = emotion
) %>%
mutate(
stimulus_song = str_extract(
string = stimulus_song, pattern = "[[:digit:]]_(.*)"
),
correct = as.factor(
case_when(
correct == TRUE ~ "TRUE",
correct == FALSE ~ "FALSE"
)
)
)
glimpse(data)
data <- here::here(
"data",
"1000ms_processed_data.csv"
) %>%
read_csv() %>%
rename(
target_emotion = target_song,
selected_emotion = emotion
) %>%
mutate(
stimulus_song = str_extract(
string = stimulus_song, pattern = "[[:digit:]]_(.*)"
),
correct_fct = as.factor(
case_when(
correct == TRUE ~ "TRUE",
correct == FALSE ~ "FALSE"
)
)
)
glimpse(data)
relax_model <- lme4::glmer(correct_fct~valence * arousal + (1 |pid) + (1 |stimulus_song),
data = filter(data, target_emotion == "relaxed"),
family = "binomial")
summary(relax_model)
ggeffects::ggpredict(
relax_model,
c("valence", "arousal")
)
ggeffects::ggpredict(
relax_model,
c("valence", "arousal")
) %>%
plot()
sjPlot::plot_model(
relax_model,
type = "eff"
)
sjPlot::plot_model(
relax_model,
type = "eff",
mdrt.values = "meansd"
)
install.packages("effects")
sjPlot::plot_model(
relax_model,
type = "eff",
mdrt.values = "meansd"
)
ggeffects::ggpredict(
relax_model,
c("valence", "arousal")
) %>%
plot()
relax_model <- lme4::glmer(correct_fct~as.numeric(valence) * as.numeric(arousal) + (1 |pid) + (1 |stimulus_song),
data = filter(data, target_emotion == "relaxed"),
family = "binomial")
summary(relax_model)
ggeffects::ggpredict(
relax_model,
c("valence", "arousal")
) %>%
plot()
reghelper::simple_slopes(relax_model)
relax_model <- lme4::glmer(correct_fct~valence * arousal + (1 |pid) + (1 |stimulus_song),
data = filter(data, target_emotion == "relaxed"),
family = "binomial")
summary(relax_model)
ggeffects::ggpredict(
relax_model,
c("valence", "arousal")
) %>%
plot()
reghelper::simple_slopes(relax_model)
summary(relax_model)
arousal_glmm <- lmerTest::lmer(arousal ~ target_emotion + (target_emotion | pid) + (1 | stimulus_song),
data = data)
anova(arousal_glmm, type = 3)
arousal_pairs <- emmeans::emmeans(arousal_glmm, pairwise ~ target_emotion, infer = TRUE)
arousal_pairs
valence_glmm <- lmerTest::lmer(valence ~ target_emotion + (target_emotion | pid) + (1 | stimulus_song),
data = data)
anova(valence_glmm, type = 3)
valence_pairs <- emmeans::emmeans(valence_glmm, pairwise ~ target_emotion, infer = TRUE)
valence_pairs
